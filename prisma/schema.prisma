// Prisma schema for international marketplace database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  role            Role     @default(BUYER)
  avatar          String?
  phone           String?
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  shop            Shop?
  addresses       Address[]
  orders          Order[]  @relation("BuyerOrders")
  sellerOrders    Order[]  @relation("SellerOrders")
  reviews         Review[]
  cartItems       CartItem[]
  payouts         Payout[]
  documents       Document[]

  @@map("users")
}

model Shop {
  id          String   @id @default(cuid())
  name        String
  description String?
  logo        String?
  banner      String?
  website     String?
  isVerified  Boolean  @default(false)
  rating      Float    @default(0)
  totalSales  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  location    Address  @relation("ShopAddress")
  products    Product[]
  orders      Order[]  @relation("ShopOrders")

  @@map("shops")
}

model Address {
  id         String   @id @default(cuid())
  street     String
  city       String
  state      String?
  country    String
  postalCode String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop       Shop?    @relation("ShopAddress")
  orders     Order[]  @relation("ShippingAddress")
  billingOrders Order[] @relation("BillingAddress")

  @@map("addresses")
}

model Product {
  id          String        @id @default(cuid())
  title       String
  description String
  price       Float
  currency    String        @default("USD")
  category    String
  subcategory String?
  images      String[]
  stock       Int           @default(0)
  sku         String?
  weight      Float?
  dimensions  Json?         // {length, width, height}
  status      ProductStatus @default(DRAFT)
  isActive    Boolean       @default(true)
  tags        String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  shopId      String
  shop        Shop         @relation(fields: [shopId], references: [id], onDelete: Cascade)
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  shippingOptions ShippingOption[]

  // Computed fields (will be calculated in application)
  averageRating Float @default(0)
  totalReviews  Int   @default(0)

  @@map("products")
}

model ShippingOption {
  id             String  @id @default(cuid())
  name           String
  price          Float
  currency       String  @default("USD")
  estimatedDays  Int
  countries      String[]
  isInternational Boolean @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  productId      String
  product        Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  orders         Order[]

  @@map("shipping_options")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5
  comment   String?
  images    String[]
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  currency        String      @default("USD")
  trackingNumber  String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  buyerId         String
  buyer           User        @relation("BuyerOrders", fields: [buyerId], references: [id])
  sellerId        String
  seller          User        @relation("SellerOrders", fields: [sellerId], references: [id])
  shopId          String
  shop            Shop        @relation("ShopOrders", fields: [shopId], references: [id])
  shippingAddressId String
  shippingAddress Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId  String
  billingAddress  Address     @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]
  shippingOption  ShippingOption?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  currency  String  @default("USD")
  createdAt DateTime @default(now())

  // Relations
  productId String
  product   Product @relation(fields: [productId], references: [id])
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("cart_items")
}

model Payout {
  id          String      @id @default(cuid())
  amount      Float
  currency    String      @default("USD")
  status      PayoutStatus @default(PENDING)
  processedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  sellerId    String
  seller      User       @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  bankDetails BankDetails

  @@map("payouts")
}

model BankDetails {
  id              String   @id @default(cuid())
  accountHolderName String
  accountNumber   String
  routingNumber   String
  bankName        String
  bankCountry     String
  currency        String   @default("USD")
  isVerified      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payouts         Payout[]

  @@map("bank_details")
}

model Document {
  id         String            @id @default(cuid())
  type       DocumentType
  url        String
  status     VerificationState @default(PENDING)
  uploadedAt DateTime          @default(now())

  // Relations
  userId     String
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model BusinessInfo {
  id                 String   @id @default(cuid())
  businessName       String
  businessType       BusinessType
  taxId              String?
  registrationNumber String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  userId             String
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("business_info")
}

// Enums
enum Role {
  ADMIN
  SELLER
  BUYER
}

enum ProductStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum VerificationState {
  PENDING
  VERIFIED
  REJECTED
}

enum DocumentType {
  ID
  BUSINESS_LICENSE
  TAX_CERTIFICATE
  BANK_STATEMENT
}

enum BusinessType {
  INDIVIDUAL
  COMPANY
}
